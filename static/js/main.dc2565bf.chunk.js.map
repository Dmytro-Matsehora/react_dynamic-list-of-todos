{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectTodo","selectedTodoId","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","value","setValue","text","setText","onChange","event","currentTarget","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","todoId","useState","cardOpen","setCardClose","user","setUser","currentTodo","find","uploadUser","a","userId","currentUser","href","email","name","App","setTodos","loader","setLoader","setTodoId","statusFilter","setStatusFilter","textFilter","setTextFilter","loadTodos","uploadedTodos","visibleTodo","filter","todoo","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"2QAUaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACAC,EAFuC,EAEvCA,WACAC,EAHuC,EAGvCA,eAHuC,OAKvC,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GACT,OACE,qBACE,UAAQ,OACRF,UAAU,GAFZ,UAKE,oBAAIA,UAAU,eAAd,SAA8BE,EAAKC,KACnC,oBAAIH,UAAU,eAAd,SACGE,EAAKE,WAEF,sBAAMJ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKrB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWK,IAAW,CACpB,mBAAoBH,EAAKE,UACzB,mBAAoBF,EAAKE,YAH7B,SAMGF,EAAKI,UAGV,oBAAIN,UAAU,8BAAd,SACGD,IAAmBG,EAAKC,GAErB,wBACE,UAAQ,eACRH,UAAU,SACVO,KAAK,SACLC,QAAS,WACPV,EAAW,IALf,SAQE,sBAAME,UAAU,OAAhB,SACE,mBAAGA,UAAU,yBAKjB,wBACE,UAAQ,eACRA,UAAU,SACVO,KAAK,SACLC,QAAS,WACPV,EAAWI,EAAKC,KALpB,SAQE,sBAAMH,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBAhDlBE,EAAKC,aCzBTM,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,KACAC,EACI,EADJA,QAEA,OACE,uBAAMb,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRU,MAAOA,EACPI,SAAU,SAACC,GAAD,OAAWJ,EAASI,EAAMC,cAAcN,QAHpD,UAKE,wBAAQA,MAAM,MAAd,mBACA,wBAAQA,MAAM,SAAd,sBACA,wBAAQA,MAAM,YAAd,gCAKN,oBAAGV,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRO,KAAK,OACLP,UAAU,QACViB,YAAY,YACZP,MAAOE,EACPE,SAAU,SAACC,GAAD,OAAWF,EAAQE,EAAMC,cAAcN,UAEnD,sBAAMV,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBkB,MAAO,CAAEC,cAAe,OAAxD,SACY,KAATP,GACC,mCAEE,wBACE,UAAQ,oBACRL,KAAK,SACLP,UAAU,SACVQ,QAAS,kBAAMK,EAAQ,kBClD1BO,G,MAAmB,kBAC9B,qBAAKpB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASqB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICTMC,EAA6B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,OAAQpC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC1D,EAAiCoC,oBAAS,GAA1C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAsB,MAA9C,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAc1C,EAAM2C,MACxB,SAACtC,GAAD,OAAgBA,EAAKC,KAAO8B,KAGxBQ,EAAU,uCAAG,4BAAAC,EAAA,0DACbH,EADa,gCDIGI,ECFgBJ,EAAYI,ODETtB,EAAG,iBAAiBsB,ICJ1C,OAETC,EAFS,OAIfN,EAAQM,GAJO,iCDIE,IAACD,ICJH,OAAH,qDAUhB,OAFAF,KAEiB,IAAbN,EACK,KAIP,sBAAKnC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbiC,EAGA,sBAAKjC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,sBACEA,UAAU,0CACV,UAAQ,eAFV,mBAKGiC,KAIH,wBACE1B,KAAK,SACLP,UAAU,SACV,UAAQ,cACRQ,QAAS,WACP4B,GAAa,GACbtC,EAAW,SAKjB,sBAAKE,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGuC,QADH,IACGA,OADH,EACGA,EAAajC,QAGhB,oBAAGN,UAAU,QAAQ,UAAQ,aAA7B,UAEE,wBAAQA,UAAU,kBAAlB,SACG,OAACuC,QAAD,IAACA,KAAanC,UAEX,OADA,YAIL,OAECiC,EAIE,mBAAGQ,KAAI,iBAAYR,EAAKS,OAAxB,SACGT,EAAKU,OAJV,cAAC,EAAD,aAxCR,cAAC,EAAD,QC1BKC,EAAgB,WAC3B,MAA0Bd,mBAAiB,IAA3C,mBAAOrC,EAAP,KAAcoD,EAAd,KACA,EAA4Bf,oBAAS,GAArC,mBAAOgB,EAAP,KAAeC,EAAf,KACA,EAA0BjB,mBAAS,GAAnC,mBAAOhC,EAAP,KAAakD,EAAb,KACA,EAAwClB,mBAAS,OAAjD,mBAAOmB,EAAP,KAAqBC,EAArB,KACA,EAAoCpB,mBAAS,IAA7C,mBAAOqB,EAAP,KAAmBC,EAAnB,KAEMC,EAAS,uCAAG,4BAAAf,EAAA,sEFEUrB,EAAY,UEFtB,OACVqC,EADU,OAGhBT,EAASS,GACTP,GAAU,GAJM,2CAAH,qDAOfM,IAEA,IAaME,EAbW9D,EAAM+D,QAAO,SAAAC,GAC5B,OAAQR,GACN,IAAK,SACH,OAAQQ,EAAMzD,UAEhB,IAAK,YACH,OAAOyD,EAAMzD,UAEf,QACE,OAAO,MAIgBwD,QAAO,SAAAC,GAClC,OAAOA,EAAMvD,MAAMwD,cAAcC,SAASR,EAAWO,kBAGvD,OACE,qCACE,qBAAK9D,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEH,MAAOA,EACPa,MAAO2C,EACP1C,SAAU2C,EACV1C,KAAM2C,EACN1C,QAAS2C,MAIb,qBAAKxD,UAAU,QAAf,SACIkD,EAGE,cAAC,EAAD,CACErD,MAAO8D,EACP5D,eAAgBG,EAChBJ,WAAY,SAACmC,GAAD,OAAYmB,EAAUnB,MALnC,cAAC,EAAD,aAYH,IAAT/B,GAEG,cAAC,EAAD,CACE+B,OAAQ/B,EACRL,MAAO8D,EACP7D,WAAY,SAACmC,GAAD,OAAYmB,EAAUnB,UC9E9C+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dc2565bf.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectTodo: (argument: number) => number | void;\n  selectedTodoId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  selectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        return (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed\n                && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {selectedTodoId === todo.id\n                ? (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      selectTodo(0);\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                )\n                : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      selectTodo(todo.id);\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  value: string;\n  setValue: (arg: string) => (string) | void;\n  text: string;\n  setText: (arg: string) => (string) | void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  value,\n  setValue,\n  text,\n  setText,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={value}\n            onChange={(event) => setValue(event.currentTarget.value)}\n          >\n            <option value=\"all\"> All </option>\n            <option value=\"active\"> Active </option>\n            <option value=\"completed\"> Completed </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={text}\n          onChange={(event) => setText(event.currentTarget.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {text !== '' && (\n            <>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => setText('')}\n              />\n            </>\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todoId: number;\n  todos: Todo[];\n  selectTodo: (argument: number) => number | void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todoId, todos, selectTodo }) => {\n  const [cardOpen, setCardClose] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n  const currentTodo = todos.find(\n    (todo: Todo) => todo.id === todoId,\n  );\n\n  const uploadUser = async () => {\n    if (currentTodo) {\n      const currentUser = await getUser(currentTodo.userId);\n\n      setUser(currentUser);\n    }\n  };\n\n  uploadUser();\n\n  if (cardOpen === false) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!todoId ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todoId}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setCardClose(false);\n                selectTodo(0);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className=\"has-text-danger\">\n                {!currentTodo?.completed\n                  ? 'Planned'\n                  : 'Done'}\n              </strong>\n\n              {' by '}\n\n              {!user ? (\n                <Loader />\n              )\n                : (\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loader, setLoader] = useState(false);\n  const [todo, setTodoId] = useState(0);\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [textFilter, setTextFilter] = useState('');\n\n  const loadTodos = async () => {\n    const uploadedTodos = await getTodos();\n\n    setTodos(uploadedTodos);\n    setLoader(true);\n  };\n\n  loadTodos();\n\n  const filtered = todos.filter(todoo => {\n    switch (statusFilter) {\n      case 'active':\n        return !todoo.completed;\n\n      case 'completed':\n        return todoo.completed;\n\n      default:\n        return true;\n    }\n  });\n\n  const visibleTodo = filtered.filter(todoo => {\n    return todoo.title.toLowerCase().includes(textFilter.toLowerCase());\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                todos={todos}\n                value={statusFilter}\n                setValue={setStatusFilter}\n                text={textFilter}\n                setText={setTextFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!loader\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    todos={visibleTodo}\n                    selectedTodoId={todo}\n                    selectTodo={(todoId) => setTodoId(todoId)}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {todo !== 0\n        && (\n          <TodoModal\n            todoId={todo}\n            todos={visibleTodo}\n            selectTodo={(todoId) => setTodoId(todoId)}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}